# Copyright (C) 2023 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - ".github/workflows/ci.yml"
      - "cmake/**"
      - "src/**"
      - "test/*.py"
      - "utils/devel/stubgen.py"
      - "CMakeLists.txt"
      - "conanfile.py"
      - "pyproject.toml"

  pull_request:
    paths:
      - ".github/workflows/ci.yml"
      - "cmake/**"
      - "src/**"
      - "test/*.py"
      - "utils/devel/stubgen.py"
      - "CMakeLists.txt"
      - "conanfile.py"
      - "pyproject.toml"

env:
  CONAN_HOME: "${{ github.workspace }}/.conan2/"
  HICTK_CI: "1"
  UV_LINK_MODE: copy

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build-project:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2025, macos-26, ubuntu-24.04, ubuntu-24.04-arm]
        python-version: ["3.10", "3.13"]
        # include:
        #   - { os: ubuntu-24.04, python-version: "3.13+debug" }
        #   - { os: ubuntu-24.04-arm, python-version: "3.13+debug" }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6.8.0
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: true
          enable-cache: true

      - name: Collect build metadata
        id: build-meta
        run: |
          if [[ '${{ matrix.python-version }}' == *'+debug' ]]; then
            build_type=Debug
          else
            build_type=Release
          fi

          echo "build-type=$build_type" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: cache-key
        run: |
          hash="${{ hashFiles('conanfile.py') }}"

          echo "conan-key=pip-${{ matrix.os }}-${{ steps.build-meta.outputs.build-type }}-$hash" >> $GITHUB_OUTPUT

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          key: conan-${{ steps.cache-key.outputs.conan-key }}
          path: ${{ env.CONAN_HOME }}/p

      - name: Override default compilers (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo 'CC=gcc' >> $GITHUB_ENV
          echo 'CXX=g++' >> $GITHUB_ENV

      - name: Override default compilers (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          echo 'CC=clang' >> $GITHUB_ENV
          echo 'CXX=clang++' >> $GITHUB_ENV

      - name: Configure Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: uv tool run 'conan>2' remote update conancenter --url https://center2.conan.io

      - name: Update build type
        if: steps.build-meta.outputs.build-type != 'Release'
        run: |
          sed -i 's/^cmake\.build-type.*/cmake.build-type = "${{ steps.build-meta.outputs.build-type }}"/' pyproject.toml
          grep -B 5 -A 5 'build-type' pyproject.toml

      - name: Build and install
        run: uv sync --group test --verbose

      - name: Clean Conan cache
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          uv tool run 'conan>2' cache clean "*" --build
          uv tool run 'conan>2' cache clean "*" --download
          uv tool run 'conan>2' cache clean "*" --source

      - name: Save Conan cache
        uses: actions/cache/save@v4
        if: steps.cache-conan.outputs.cache-hit != 'true'
        with:
          key: conan-${{ steps.cache-key.outputs.conan-key }}
          path: ${{ env.CONAN_HOME }}/p

      - name: Test
        run: uv run pytest test -v

  pip-status-check:
    name: Status Check (CI)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-project

    steps:
      - name: Collect job results
        if: needs.build-project.result != 'success'
        run: exit 1
