# Copyright (C) 2024 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Run fuzzy tests

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/fuzzy-testing.yml"
      - "cmake/**"
      - "src/**"
      - "test/scripts/fuzzy_test.py"
      - "CMakeLists.txt"
      - "conanfile.txt"
      - "pyproject.toml"
      - "setup.cfg"
      - "setup.py"
    tags:
      - "v*.*.*"

  pull_request:
    paths:
      - ".github/workflows/fuzzy-testing.yml"
      - "cmake/**"
      - "src/**"
      - "test/scripts/fuzzy_test.py"
      - "CMakeLists.txt"
      - "conanfile.txt"
      - "pyproject.toml"
      - "setup.cfg"
      - "setup.py"

  schedule:
    # Run weekly
    - cron: "15 3 * * 0"

  workflow_dispatch:
    inputs:
      duration:
        description: "Test duration in seconds"
        required: true
        default: "600"
        type: string

      resolution:
        description: "Matrix resolution to use for testing"
        required: true
        default: "10000"
        type: string

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build-project:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # The .mcool file was generated by using hic2cool followed by cooler balance for all resolutions
          # We can't use the version shared by 4DNucleome because the .hic and .mcool files they publish
          # differ slightly
          - {
              title: ".cool",
              balance: "NONE",
              url: "https://www.dropbox.com/s/wq3k09rrpc8smmm/4DNFIPC7P27B.mcool?dl=1",
              sha256: "7ead807936afbd02c4a0da93d86dd54de489cc07e87400a691c8e917111749de",
              ref-url: "https://www.dropbox.com/s/wq3k09rrpc8smmm/4DNFIPC7P27B.mcool?dl=1",
              ref-sha256: "7ead807936afbd02c4a0da93d86dd54de489cc07e87400a691c8e917111749de",
            }
          - {
              title: ".cool",
              balance: "weight",
              url: "https://www.dropbox.com/s/wq3k09rrpc8smmm/4DNFIPC7P27B.mcool?dl=1",
              sha256: "7ead807936afbd02c4a0da93d86dd54de489cc07e87400a691c8e917111749de",
              ref-url: "https://www.dropbox.com/s/wq3k09rrpc8smmm/4DNFIPC7P27B.mcool?dl=1",
              ref-sha256: "7ead807936afbd02c4a0da93d86dd54de489cc07e87400a691c8e917111749de",
            }
          - {
              title: ".hic",
              balance: "NONE",
              url: "https://www.dropbox.com/s/gkzxt5ae82dvlrg/4DNFIPC7P27B.hic?dl=1",
              sha256: "b1ba1c942693a5b6e494de7f8da097a1435598a9bb951219929b5a84cb2a6b42",
              ref-url: "https://www.dropbox.com/s/wq3k09rrpc8smmm/4DNFIPC7P27B.mcool?dl=1",
              ref-sha256: "7ead807936afbd02c4a0da93d86dd54de489cc07e87400a691c8e917111749de",
            }
          - {
              title: ".hic",
              balance: "KR",
              url: "https://www.dropbox.com/s/gkzxt5ae82dvlrg/4DNFIPC7P27B.hic?dl=1",
              sha256: "b1ba1c942693a5b6e494de7f8da097a1435598a9bb951219929b5a84cb2a6b42",
              ref-url: "https://www.dropbox.com/s/wq3k09rrpc8smmm/4DNFIPC7P27B.mcool?dl=1",
              ref-sha256: "7ead807936afbd02c4a0da93d86dd54de489cc07e87400a691c8e917111749de",
            }

    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-24.04-cxx-clang-18
      options: "--user=root"

    env:
      CONAN_HOME: "/root/.conan2"
      HICTK_CI: "1"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          hash="${{ hashFiles('conanfile.txt') }}"

          echo "key=fuzzer-$hash" >> $GITHUB_OUTPUT

      - name: Install Python
        run: |
          apt-get update
          apt-get install -y python3.12 python3.12-dev

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Build and install
        run: pip install --verbose .

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Save Conan cache
        uses: actions/cache/save@v4
        if: steps.cache-conan.outputs.cache-hit != 'true'
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_HOME }}

      - name: Install test dependencies
        run: |
          apt-get update
          apt-get install -y curl
          pip install --no-cache-dir 'cooler==0.10.*' 'numpy<2'

      - name: Detect CI type
        id: ci-type
        run: |
          if git log --format=%B -n 1 ${{ github.event.after }} | grep -qF '[ci full]'; then
            echo "type=full" >> $GITHUB_OUTPUT
          else
            echo "type=short" >> $GITHUB_OUTPUT
          fi

      - name: Prepare for test
        id: test-params
        env:
          PYTHONHASHSEED: 0
        run: |
          seed="$(python3 -c 'import random; print(random.randint(0, 2**32))')"

          duration=600
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            duration='${{ inputs.duration }}'
          elif [[ ${{ steps.ci-type.outputs.type }} == 'full' ]]; then
            duration=3600
          fi

          resolution=10000
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            resolution='${{ inputs.resolution }}'
          fi

          2>&1 echo "Seed: ${seed}"
          2>&1 echo "Duration: ${duration}"
          2>&1 echo "Resolution: ${resolution}"

          echo "seed=$seed" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "resolution=$resolution" >> $GITHUB_OUTPUT

      - name: Download test datasets
        run: |
          resolution="${{ steps.test-params.outputs.resolution }}"
          echo "${{ matrix.ref-sha256 }} reference.mcool" | tee checksums.sha256
          curl -L "${{ matrix.ref-url }}" -o reference.mcool
          sha256sum -c checksums.sha256

          if [[ ${{ matrix.ref-sha256 }} == ${{ matrix.sha256 }} ]]; then
            ln -s reference.mcool test.matrix
          else
            echo "${{ matrix.sha256 }}  test.matrix" | tee checksums.sha256
            curl -L "${{ matrix.url }}" -o test.matrix
            sha256sum -c checksums.sha256
          fi

      - name: Run test (df)
        run: |
          test/scripts/fuzzy_test.py \
            --resolution ${{ steps.test-params.outputs.resolution }} \
            --seed '${{ steps.test-params.outputs.seed }}' \
            --duration '${{ steps.test-params.outputs.duration }}' \
            --normalization ${{ matrix.balance }} \
            --nproc $(nproc) \
            --format df \
            test.matrix \
            reference.mcool

      - name: Run test (numpy)
        run: |
          test/scripts/fuzzy_test.py \
            --resolution ${{ steps.test-params.outputs.resolution }} \
            --seed '${{ steps.test-params.outputs.seed }}' \
            --duration '${{ steps.test-params.outputs.duration }}' \
            --normalization ${{ matrix.balance }} \
            --nproc $(nproc) \
            --format numpy \
            test.matrix \
            reference.mcool

      - name: Run test (coo)
        run: |
          test/scripts/fuzzy_test.py \
            --resolution ${{ steps.test-params.outputs.resolution }} \
            --seed '${{ steps.test-params.outputs.seed }}' \
            --duration '${{ steps.test-params.outputs.duration }}' \
            --normalization ${{ matrix.balance }} \
            --nproc $(nproc) \
            --format coo \
            test.matrix \
            reference.mcool

  fuzzy-testing-status-check:
    name: Status Check (fuzzy-testing)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-project

    steps:
      - name: Collect job results
        if: needs.build-project.result != 'success'
        run: exit 1
