# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
# SPDX-License-Identifier: MIT

name: Build dependencies with Conan (Linux)

on:
  workflow_call:
    outputs:
      cache-key:
        description: "Cache key"
        value: ${{ jobs.build-deps.outputs.cache-key }}
      tar:
        description: "Archive path"
        value: ${{ jobs.build-deps.outputs.tar }}

    inputs:
      conan-version:
        type: string
        required: true
        description: "Conan version to be installed with pip."
      cppstd:
        type: string
        required: true
        description: "Value to pass to compiler.cppstd."
      os:
        type: string
        required: true
        description: "OS to use as runner."
      arch:
        type: string
        required: true
        description: "Architecture used to build deps."
      image-version:
        type: string
        required: true
        description: "Image version for the manylinux_2_28_* Docker image."
      ref:
        type: string
        required: true
        description: "Reference used to clone the conanfile.py and build script."

defaults:
  run:
    shell: bash

jobs:
  build-deps:
    name: Build dependencies with Conan (manylinux_2_28; ${{ inputs.arch }})
    runs-on: ${{ inputs.os }}

    env:
      CONAN_HOME: "${{ github.workspace }}/.conan2"
      IMAGE: quay.io/pypa/manylinux_2_28_${{ inputs.arch }}:${{ inputs.image-version }}
      TMPDIR: /host/tmp/

    outputs:
      cache-key: ${{ steps.generate-cache-key.outputs.cache-key }}
      tar: ${{ steps.generate-cache-key.outputs.tar }}

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}

      - name: Create TMPDIR
        run: sudo mkdir -p "$TMPDIR"

      - name: Generate cache key
        id: generate-cache-key
        run: |
          cat << 'EOF' | tee script.sh > /dev/null
          #!usr/bin/env bash
          set -u
          set -e

          dnf install -y clang

          hash="${{ hashFiles('conanfile.py', 'utils/devel/build_dependencies.py') }}"

          compiler="$(clang --version | head -n 1)"
          suffix="${{ inputs.os }}-$IMAGE-$compiler-cxx${{ inputs.cppstd }}-$hash"
          suffix="$(echo "$suffix" |
                    tr -c '[:alnum:]._-' '-' |
                    sed 's/-\+/-/g' |
                    sed 's/-$//' |
                    tr '[:upper:]' '[:lower:]'
                  )"

          dest='/tmp/dependencies.conan.tar.zst'

          echo "cache-key=conan-$suffix" | tee -a "$GITHUB_OUTPUT"
          echo "tar=$dest" | tee -a "$GITHUB_OUTPUT"
          EOF

          chmod 755 script.sh

          docker run \
            -e "IMAGE=$IMAGE" \
            -e "GITHUB_OUTPUT=$GITHUB_OUTPUT" \
            -v "$GITHUB_OUTPUT:$GITHUB_OUTPUT" \
            -v "$PWD/script.sh:/tmp/script.sh:ro" \
            "$IMAGE" /tmp/script.sh

      - name: Lookup package cache
        id: lookup-conan-cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.generate-cache-key.outputs.cache-key }}
          path: ${{ steps.generate-cache-key.outputs.tar }}
          lookup-only: true

      - name: Clean Conan cache
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: rm -rf "$CONAN_HOME/p"

      - name: Install dependencies
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: |
          cat << 'EOF' | tee script.sh > /dev/null
          #!usr/bin/env bash
          set -u
          set -e

          conan_version="$1"

          dnf install -y clang

          cppstd="$2"

          PATH="/opt/python/cp313-cp313/bin:$PATH"
          pip install "conan==$conan_version"

          CC=clang
          CXX=clang++
          CMAKE_POLICY_VERSION_MINIMUM=3.5

          cd /tmp/
          ./build_dependencies.py --cppstd='${{ inputs.cppstd }}' --ci
          EOF

          chmod 755 script.sh

          docker run \
            -e "CONAN_HOME=$CONAN_HOME" \
            -e "TMPDIR=$TMPDIR" \
            -v "$PWD/script.sh:/tmp/script.sh:ro" \
            -v "$PWD/conanfile.py:/tmp/conanfile.py:ro" \
            -v "$PWD/utils/devel/build_dependencies.py:/tmp/build_dependencies.py:ro" \
            -v "$CONAN_HOME:$CONAN_HOME" \
            -v "$TMPDIR:$TMPDIR" \
            "$IMAGE" /tmp/script.sh '${{ inputs.conan-version }}' '${{ inputs.cppstd }}'

      - name: Archive dependencies
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        run: |
          src='deps/'
          dest='${{ steps.generate-cache-key.outputs.tar }}'
          tar -C "$TMPDIR" -cf - "$src" |
            zstd -T0 -22 --long --ultra -v -o "$dest"

          echo "tar=$dest" | tee -a "$GITHUB_OUTPUT"

      - name: Export dependencies
        uses: actions/cache/save@v4
        if: steps.lookup-conan-cache.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.generate-cache-key.outputs.cache-key }}
          path: ${{ steps.generate-cache-key.outputs.tar }}
        env:
          ZSTD_CLEVEL: 0
